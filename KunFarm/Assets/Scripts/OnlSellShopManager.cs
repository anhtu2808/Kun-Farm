using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;
using TMPro;

public class OnlSellShopManager : MonoBehaviour
{
    [Header("References")]
    public Player player;
    public GameObject shopPanel;
    public ItemManager itemManager;
    public PlayerInventoryScroll_UI playerInventoryScrollUI;
    public Transform sellSlotContainer;

    [Header("Settings")]
    public int playerId = 1; // Default player ID, c√≥ th·ªÉ set t·ª´ inspector ho·∫∑c script kh√°c

    [Header("UI")]
    public GameObject shopSellSlotPrefab;
    public GameObject soldItemSlotPrefab; // Prefab cho items ƒë√£ ƒëƒÉng b√°n

    [Header("Slot Settings")]
    [SerializeField] private int minSlotCount = 27; // S·ªë slot t·ªëi thi·ªÉu

    private List<SoldItemSlot_UI> soldSlots = new(); // Danh s√°ch t·∫•t c·∫£ slot UI
    private bool isOpen = false;
    private bool slotsInitialized = false;

    private void Awake()
    {
        if (player == null)
            player = FindObjectOfType<Player>();
        if (itemManager == null)
            itemManager = FindObjectOfType<ItemManager>();
        if (playerInventoryScrollUI == null)
            playerInventoryScrollUI = FindObjectOfType<PlayerInventoryScroll_UI>();
        shopPanel.SetActive(false);

        // Kh·ªüi t·∫°o s·∫µn c√°c slot r·ªóng
        InitializeEmptySlots();
    }

    private void Start()
    {
        if (shopPanel != null)
            shopPanel.SetActive(false);
    }

    /// <summary>
    /// Kh·ªüi t·∫°o s·∫µn 27 slot r·ªóng
    /// </summary>
    private void InitializeEmptySlots()
    {
        if (slotsInitialized || soldItemSlotPrefab == null || sellSlotContainer == null)
            return;

        Debug.Log($"üîß [Sell Shop] Kh·ªüi t·∫°o {minSlotCount} slot r·ªóng...");

        for (int i = 0; i < minSlotCount; i++)
        {
            GameObject slotGO = Instantiate(soldItemSlotPrefab, sellSlotContainer);
            var slotUI = slotGO.GetComponent<SoldItemSlot_UI>();
            
            if (slotUI != null)
            {
                slotUI.SetupEmptySlot(); // Setup slot r·ªóng
                soldSlots.Add(slotUI);
            }
            else
            {
                Debug.LogError($"‚ùå [Sell Shop] SoldItemSlot_UI component not found on prefab!");
                Destroy(slotGO);
            }
        }

        slotsInitialized = true;
        Debug.Log($"‚úÖ [Sell Shop] ƒê√£ kh·ªüi t·∫°o {soldSlots.Count} slot r·ªóng");
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.O))
        {
            ToggleShop();
        }
    }

    public void ToggleShop()
    {
        if (isOpen) CloseShop();
        else OpenShop();
    }

    public void CloseShop()
    {
        isOpen = false;
        shopPanel.SetActive(false);
    }

    public void OpenShop()
    {
        isOpen = true;
        shopPanel.SetActive(true);
        
        // ƒê·∫£m b·∫£o slots ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
        if (!slotsInitialized)
        {
            InitializeEmptySlots();
        }
        
        // Refresh inventory UI ƒë·ªÉ hi·ªÉn th·ªã items hi·ªán t·∫°i
        if (playerInventoryScrollUI != null)
        {
            StartCoroutine(RefreshInventoryWithDelayCoroutine());
        }
        
        // Load sold items ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI (kh√¥ng auto claim)
        LoadSoldItemsForDisplay();
    }

    /// <summary>
    /// Refresh inventory v·ªõi delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë√£ active
    /// </summary>
    public void RefreshInventoryWithDelay()
    {
        if (gameObject.activeInHierarchy)
        {
            StartCoroutine(RefreshInventoryWithDelayCoroutine());
        }
        else
        {
            // Fallback: g·ªçi tr·ª±c ti·∫øp refresh
            if (playerInventoryScrollUI != null)
            {
                playerInventoryScrollUI.RefreshInventoryUI();
            }
        }
    }

    private IEnumerator RefreshInventoryWithDelayCoroutine()
    {
        yield return new WaitForEndOfFrame();
        yield return new WaitForEndOfFrame(); // Double frame wait for safety
        if (playerInventoryScrollUI != null)
        {
            playerInventoryScrollUI.RefreshInventoryUI();
        }
    }

    /// <summary>
    /// G·ªçi khi ng∆∞·ªùi ch∆°i mu·ªën b√°n item l√™n shop online
    /// </summary>
    public void SellItemOnline(CollectableType type, int quantity, int pricePerUnit)
    {
        // Ki·ªÉm tra xem player c√≥ ƒë·ªß item ƒë·ªÉ b√°n kh√¥ng
        if (!HasSufficientItems(type, quantity))
        {
            Debug.LogWarning($"‚ùå [Online Sell] Kh√¥ng ƒë·ªß {type} ƒë·ªÉ b√°n! C·∫ßn: {quantity}, C√≥: {GetInventoryItemCount(type)}");
            return;
        }

        Debug.Log($"üõí [Online Sell] B√°n item: {type}, S·ªë l∆∞·ª£ng: {quantity}, Gi√° m·ªói ƒë∆°n v·ªã: {pricePerUnit}G");
        int totalPrice = quantity * pricePerUnit;
        StartCoroutine(SendSellRequest(type.ToString(), quantity, totalPrice, type));
    }

    private IEnumerator SendSellRequest(string collectableType, int quantity, int totalPrice, CollectableType itemType)
    {
        Debug.Log($"üì§ [Online Sell] G·ª≠i y√™u c·∫ßu b√°n: {collectableType}, S·ªë l∆∞·ª£ng: {quantity}, T·ªïng gi√°: {totalPrice}");
        string url = $"http://localhost:5270/online-shop/sell/{1}";

        SellItemRequest requestData = new SellItemRequest
        {
            collectableType = collectableType,
            quantity = quantity,
            price = totalPrice
        };

        string json = JsonUtility.ToJson(requestData);
        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);

        UnityWebRequest request = new UnityWebRequest(url, "POST");
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        Debug.Log("üì§ [Online Sell] ƒêang g·ª≠i d·ªØ li·ªáu: " + json);
        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log("‚úÖ [Online Sell] B√°n th√†nh c√¥ng: " + request.downloadHandler.text);
            
            // ‚úÖ TH·ª∞C S·ª∞ TR·ª™ ITEM KH·ªéI INVENTORY
            bool itemRemoved = RemoveItemFromInventory(itemType, quantity);
            if (itemRemoved)
            {
                CollectableType parsedType = (CollectableType)System.Enum.Parse(typeof(CollectableType), collectableType);
                AddSoldItem(parsedType, quantity, totalPrice);
                
                // Notify inventory changed ƒë·ªÉ refresh UI
                if (player != null && player.inventory != null)
                {
                    player.inventory.NotifyInventoryChanged();
                }
                
                Debug.Log($"‚úÖ [Online Sell] ƒê√£ tr·ª´ {quantity}x {itemType} kh·ªèi inventory");
            }
            else
            {
                Debug.LogError($"‚ùå [Online Sell] Kh√¥ng th·ªÉ tr·ª´ {quantity}x {itemType} kh·ªèi inventory!");
            }
        }
        else
        {
            Debug.LogError("‚ùå [Online Sell] L·ªói khi g·ª≠i request: " + request.error);
        }
    }

    /// <summary>
    /// Tr·ª´ item kh·ªèi inventory c·ªßa player
    /// </summary>
    private bool RemoveItemFromInventory(CollectableType itemType, int quantity)
    {
        if (player == null || player.inventory == null)
        {
            Debug.LogError("OnlSellShopManager: Player ho·∫∑c inventory null!");
            return false;
        }

        // T√¨m item trong inventory v√† tr·ª´ ƒëi
        int remainingToRemove = quantity;
        for (int i = 0; i < player.inventory.slots.Count && remainingToRemove > 0; i++)
        {
            var slot = player.inventory.slots[i];
            if (slot.type == itemType && slot.count > 0)
            {
                int removeFromThisSlot = Mathf.Min(remainingToRemove, slot.count);
                
                // Tr·ª´ t·ª´ slot n√†y
                player.inventory.slots[i] = new Inventory.Slot
                {
                    type = slot.count - removeFromThisSlot <= 0 ? CollectableType.NONE : slot.type,
                    count = Mathf.Max(0, slot.count - removeFromThisSlot),
                    icon = slot.count - removeFromThisSlot <= 0 ? null : slot.icon
                };
                
                remainingToRemove -= removeFromThisSlot;
                Debug.Log($"Tr·ª´ {removeFromThisSlot}x {itemType} t·ª´ slot {i}, c√≤n l·∫°i: {player.inventory.slots[i].count}");
            }
        }

        return remainingToRemove == 0; // True n·∫øu tr·ª´ h·∫øt s·ªë l∆∞·ª£ng c·∫ßn thi·∫øt
    }

    /// <summary>
    /// Ki·ªÉm tra xem c√≥ ƒë·ªß item ƒë·ªÉ b√°n kh√¥ng
    /// </summary>
    private bool HasSufficientItems(CollectableType itemType, int requiredQuantity)
    {
        return GetInventoryItemCount(itemType) >= requiredQuantity;
    }

    /// <summary>
    /// L·∫•y t·ªïng s·ªë l∆∞·ª£ng item trong inventory
    /// </summary>
    private int GetInventoryItemCount(CollectableType itemType)
    {
        if (player == null || player.inventory == null)
            return 0;

        int totalCount = 0;
        foreach (var slot in player.inventory.slots)
        {
            if (slot.type == itemType)
            {
                totalCount += slot.count;
            }
        }
        return totalCount;
    }

    private void AddSoldItem(CollectableType itemType, int quantity, int totalPrice)
    {
        // ‚ùå OLD METHOD - Kh√¥ng d√πng n·ªØa v√¨ gi·ªù ta load t·ª´ server
        // Method n√†y s·∫Ω b·ªã deprecated, ta ch·ªâ c·∫ßn refresh t·ª´ server
        Debug.LogWarning("[AddSoldItem] Method deprecated - use LoadSoldItemsForDisplay() instead");
        
        // Refresh data t·ª´ server thay v√¨ add local
        LoadSoldItemsForDisplay();
    }

    /// <summary>
    /// L√†m m·ªõi danh s√°ch (reset v·ªÅ slot r·ªóng, kh√¥ng destroy)
    /// </summary>
    private void ClearAllSlots()
    {
        Debug.Log($"üßπ [Sell Shop] Reset {soldSlots.Count} slot v·ªÅ tr·∫°ng th√°i r·ªóng");
        
        foreach (var slot in soldSlots)
        {
            if (slot != null)
            {
                slot.SetupEmptySlot();
            }
        }
    }

    /// <summary>
    /// Load danh s√°ch items player ƒë√£ b√°n ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI
    /// </summary>
    public void LoadSoldItemsForDisplay()
    {
        StartCoroutine(LoadSoldItemsCoroutine());
    }

    private IEnumerator LoadSoldItemsCoroutine()
    {
        string apiUrl = $"http://localhost:5270/online-shop/sold-items/{playerId}";
        
        UnityWebRequest request = UnityWebRequest.Get(apiUrl);
        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            string json = request.downloadHandler.text;
            Debug.Log($"‚úÖ [Sell Shop] Sold items response: {json}");
            
            // Parse response
            SoldItemsWrapper response = JsonUtility.FromJson<SoldItemsWrapper>(json);
            if (response != null && response.data != null)
            {
                Debug.Log($"üìã [Sell Shop] T√¨m th·∫•y {response.data.Count} items ƒë√£ ƒëƒÉng b√°n");
                
                // Hi·ªÉn th·ªã t·∫•t c·∫£ items tr√™n UI (c·∫£ ƒëang b√°n v√† ƒë√£ b√°n)
                DisplaySoldItemsOnUI(response.data);
            }
            else
            {
                Debug.Log($"üìã [Sell Shop] Kh√¥ng c√≥ items, hi·ªÉn th·ªã slot r·ªóng");
                // Reset v·ªÅ tr·∫°ng th√°i r·ªóng n·∫øu kh√¥ng c√≥ data
                ClearAllSlots();
            }
        }
        else
        {
            Debug.LogError($"‚ùå [Sell Shop] Load sold items failed: {request.error}");
            // Reset v·ªÅ tr·∫°ng th√°i r·ªóng n·∫øu API l·ªói
            ClearAllSlots();
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã danh s√°ch sold items l√™n UI, s·ª≠ d·ª•ng slot c√≥ s·∫µn
    /// </summary>
    private void DisplaySoldItemsOnUI(List<SellItemResponse> soldItems)
    {
        // Reset t·∫•t c·∫£ slot v·ªÅ tr·∫°ng th√°i r·ªóng tr∆∞·ªõc
        ClearAllSlots();
        
        // ƒê·∫£m b·∫£o c√≥ ƒë·ªß slot cho t·∫•t c·∫£ items
        EnsureEnoughSlots(soldItems.Count);
        
        // Fill data v√†o c√°c slot
        for (int i = 0; i < soldItems.Count && i < soldSlots.Count; i++)
        {
            var item = soldItems[i];
            var slotUI = soldSlots[i];
            
            if (slotUI != null)
            {
                // Setup UI v·ªõi callback claim
                slotUI.Setup(item, this, OnClaimSingleItem);
                Debug.Log($"üì¶ [Sell Shop UI] Filled slot {i}: {item.collectableType}, ItemId: {item.id}, Price: {item.price}G, CanBuy: {item.canBuy}");
            }
        }
        
        Debug.Log($"‚úÖ [Sell Shop] Hi·ªÉn th·ªã {soldItems.Count} items tr√™n {soldSlots.Count} slot");
    }

    /// <summary>
    /// ƒê·∫£m b·∫£o c√≥ ƒë·ªß slot cho s·ªë l∆∞·ª£ng items
    /// </summary>
    private void EnsureEnoughSlots(int requiredSlots)
    {
        if (requiredSlots <= soldSlots.Count)
            return; // ƒê√£ c√≥ ƒë·ªß slot

        int slotsToAdd = requiredSlots - soldSlots.Count;
        Debug.Log($"üîß [Sell Shop] C·∫ßn th√™m {slotsToAdd} slot (t·ª´ {soldSlots.Count} l√™n {requiredSlots})");

        for (int i = 0; i < slotsToAdd; i++)
        {
            GameObject slotGO = Instantiate(soldItemSlotPrefab, sellSlotContainer);
            var slotUI = slotGO.GetComponent<SoldItemSlot_UI>();
            
            if (slotUI != null)
            {
                slotUI.SetupEmptySlot();
                soldSlots.Add(slotUI);
            }
            else
            {
                Debug.LogError($"‚ùå [Sell Shop] SoldItemSlot_UI component not found on prefab!");
                Destroy(slotGO);
            }
        }

        Debug.Log($"‚úÖ [Sell Shop] ƒê√£ t·∫°o th√™m {slotsToAdd} slot, t·ªïng: {soldSlots.Count}");
    }

    /// <summary>
    /// Callback khi player click claim m·ªôt item c·ª• th·ªÉ
    /// </summary>
    private void OnClaimSingleItem(SellItemResponse item)
    {
        if (item.canBuy)
        {
            Debug.LogWarning($"‚ö†Ô∏è [Claim] Item {item.collectableType} v·∫´n ƒëang b√°n (canBuy=true), kh√¥ng th·ªÉ claim!");
            return;
        }
        
        Debug.Log($"üí∞ [Claim] Player mu·ªën claim: {item.collectableType} v·ªõi gi√° {item.price}G");
        
        // Claim ch·ªâ 1 item n√†y
        List<int> singleItemId = new List<int> { item.id };
        StartCoroutine(ClaimMoneyCoroutine(singleItemId, item.price));
    }

    /// <summary>
    /// Claim money t·ª´ c√°c items ƒë√£ b√°n
    /// </summary>
    private IEnumerator ClaimMoneyCoroutine(List<int> itemIds, int expectedAmount)
    {
        string apiUrl = $"http://localhost:5270/online-shop/claim-money/{playerId}";
        string json = "[" + string.Join(",", itemIds) + "]";
        
        Debug.Log($"üì§ [Sell Shop] Claiming money for items: {json}");
        
        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);
        UnityWebRequest request = new UnityWebRequest(apiUrl, "POST");
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log($"‚úÖ [Sell Shop] Claim money th√†nh c√¥ng! Response: {request.downloadHandler.text}");
            
            // C·ªông ti·ªÅn v√†o wallet Unity
            if (player?.wallet != null)
            {
                player.wallet.Add(expectedAmount);
                Debug.Log($"üí∞ [Sell Shop] ƒê√£ c·ªông {expectedAmount}G v√†o wallet, t·ªïng: {player.wallet.Money}G");
            }
            
            // Destroy specific slot sau khi claim th√†nh c√¥ng
            DestroyClaimedSlot(itemIds[0]); // Single item claim
            
            Debug.Log($"üéâ [Sell Shop] Claim th√†nh c√¥ng {expectedAmount}G v√† ƒë√£ destroy slot!");
        }
        else
        {
            Debug.LogError($"‚ùå [Sell Shop] Claim money failed: {request.error}");
            
            // Re-enable slot button for failed items
            EnableSlotButtonsForItems(itemIds);
        }
    }

    /// <summary>
    /// Destroy specific slot sau khi claim th√†nh c√¥ng
    /// </summary>
    private void DestroyClaimedSlot(int itemId)
    {
        Debug.Log($"üóëÔ∏è [Sell Shop] T√¨m v√† destroy slot v·ªõi itemId: {itemId}");
        
        // T√¨m slot v·ªõi itemId c·ª• th·ªÉ
        SoldItemSlot_UI slotToDestroy = null;
        foreach (var slot in soldSlots)
        {
            if (slot != null && slot.GetItemId() == itemId)
            {
                slotToDestroy = slot;
                break;
            }
        }
        
        if (slotToDestroy != null)
        {
            // Remove t·ª´ list tr∆∞·ªõc khi destroy
            soldSlots.Remove(slotToDestroy);
            
            // Destroy slot
            slotToDestroy.DestroySlot();
            
            Debug.Log($"‚úÖ [Sell Shop] ƒê√£ destroy slot itemId: {itemId}. C√≤n l·∫°i: {soldSlots.Count} slot");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è [Sell Shop] Kh√¥ng t√¨m th·∫•y slot v·ªõi itemId: {itemId}");
        }
    }

    /// <summary>
    /// Re-enable slot buttons for specific items (khi claim th·∫•t b·∫°i)
    /// </summary>
    private void EnableSlotButtonsForItems(List<int> itemIds)
    {
        // T√¨m v√† re-enable buttons cho c√°c items failed
        foreach (var slot in soldSlots)
        {
            if (slot != null && itemIds.Contains(slot.GetItemId()))
            {
                slot.EnableSlotButton();
            }
        }
    }

    // Events
    public System.Action OnShopUpdated;
}

[System.Serializable]
public class SoldItemsWrapper
{
    public int code;
    public List<SellItemResponse> data;
    public string message;
}
