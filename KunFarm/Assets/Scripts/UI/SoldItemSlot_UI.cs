using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;

/// <summary>
/// UI component cho items ƒë√£ ƒëƒÉng b√°n online
/// Hi·ªÉn th·ªã th√¥ng tin item + click ƒë·ªÉ claim n·∫øu ƒë√£ b√°n
/// Ph√¢n bi·ªát tr·∫°ng th√°i b·∫±ng m√†u background
/// C√≥ th·ªÉ hi·ªÉn th·ªã slot r·ªóng
/// </summary>
public class SoldItemSlot_UI : MonoBehaviour
{
    [Header("UI References")]
    [SerializeField] private Image itemIcon;
    [SerializeField] private TextMeshProUGUI itemNameText;
    [SerializeField] private TextMeshProUGUI quantityText;
    [SerializeField] private TextMeshProUGUI priceText;
    [SerializeField] private TextMeshProUGUI statusText;
    [SerializeField] private Image backgroundImage; // Background ƒë·ªÉ ƒë·ªïi m√†u

    [Header("Color Settings")]
    [SerializeField] private Color sellingColor = new Color(1f, 1f, 0.8f, 1f); // M√†u v√†ng nh·∫°t cho ƒëang b√°n
    [SerializeField] private Color soldColor = new Color(0.8f, 1f, 0.8f, 1f); // M√†u xanh nh·∫°t cho ƒë√£ b√°n
    [SerializeField] private Color emptyColor = new Color(0.9f, 0.9f, 0.9f, 1f); // M√†u x√°m nh·∫°t cho slot r·ªóng

    private SellItemResponse itemData;
    private OnlSellShopManager shopManager;
    private Action<SellItemResponse> onClaimCallback;
    private Button slotButton; // Button cho to√†n b·ªô slot
    private bool isEmpty = true; // Tr·∫°ng th√°i slot r·ªóng

    private void Awake()
    {
        // ƒê·∫£m b·∫£o c√≥ Button component cho to√†n b·ªô slot
        slotButton = GetComponent<Button>();
        if (slotButton == null)
        {
            slotButton = gameObject.AddComponent<Button>();
        }

        // N·∫øu ch∆∞a c√≥ background image, t·∫°o m·ªõi
        if (backgroundImage == null)
        {
            backgroundImage = GetComponent<Image>();
            if (backgroundImage == null)
            {
                backgroundImage = gameObject.AddComponent<Image>();
            }
        }

        // Kh·ªüi t·∫°o slot r·ªóng
        SetupEmptySlot();
    }

    /// <summary>
    /// Setup slot r·ªóng (kh√¥ng c√≥ data)
    /// </summary>
    public void SetupEmptySlot()
    {
        isEmpty = true;
        itemData = null;
        
        // ·∫®n t·∫•t c·∫£ UI elements
        if (itemIcon != null) itemIcon.gameObject.SetActive(false);
        if (itemNameText != null) itemNameText.text = "";
        if (quantityText != null) quantityText.text = "";
        if (priceText != null) priceText.text = "";
        if (statusText != null) statusText.text = "Slot tr·ªëng";
        
        // Set background color cho slot r·ªóng
        if (backgroundImage != null)
            backgroundImage.color = emptyColor;
        
        // Disable button cho slot r·ªóng
        if (slotButton != null)
        {
            slotButton.interactable = false;
            slotButton.onClick.RemoveAllListeners();
        }
    }

    /// <summary>
    /// Setup UI slot v·ªõi data t·ª´ server
    /// </summary>
    public void Setup(SellItemResponse data, OnlSellShopManager manager, Action<SellItemResponse> claimCallback)
    {
        isEmpty = false;
        itemData = data;
        shopManager = manager;
        onClaimCallback = claimCallback;

        UpdateUI();
        SetupSlotButton();
    }

    private void UpdateUI()
    {
        if (itemData == null) 
        {
            SetupEmptySlot();
            return;
        }

        // Set item name
        if (itemNameText != null)
            itemNameText.text = itemData.collectableType;

        // Set quantity  
        if (quantityText != null)
            quantityText.text = $"x{itemData.quantity}";

        // Set price
        if (priceText != null)
            priceText.text = $"{itemData.price}G";

        // Set icon t·ª´ ItemManager
        if (itemIcon != null)
        {
            LoadItemIcon();
        }

        // Set status v√† background color
        UpdateStatusAndVisual();
    }

    /// <summary>
    /// Load icon t·ª´ ItemManager d·ª±a tr√™n collectableType
    /// </summary>
    private void LoadItemIcon()
    {
        try
        {
            // Parse CollectableType t·ª´ string
            if (System.Enum.TryParse<CollectableType>(itemData.collectableType, ignoreCase: true, out var parsedType))
            {
                // T√¨m ItemManager trong scene
                ItemManager itemManager = FindObjectOfType<ItemManager>();
                if (itemManager != null)
                {
                    // L·∫•y Collectable t·ª´ ItemManager
                    var collectable = itemManager.GetItemByType(parsedType);
                    if (collectable != null && collectable.icon != null)
                    {
                        itemIcon.sprite = collectable.icon;
                        itemIcon.gameObject.SetActive(true);
                        Debug.Log($"‚úÖ [SoldItemSlot] Loaded icon for {itemData.collectableType}");
                    }
                    else
                    {
                        Debug.LogWarning($"‚ö†Ô∏è [SoldItemSlot] No icon found for {itemData.collectableType}");
                        itemIcon.gameObject.SetActive(false);
                    }
                }
                else
                {
                    Debug.LogError("‚ùå [SoldItemSlot] ItemManager not found in scene!");
                    itemIcon.gameObject.SetActive(false);
                }
            }
            else
            {
                Debug.LogError($"‚ùå [SoldItemSlot] Cannot parse CollectableType: {itemData.collectableType}");
                itemIcon.gameObject.SetActive(false);
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå [SoldItemSlot] Error loading icon: {e.Message}");
            itemIcon.gameObject.SetActive(false);
        }
    }

    private void UpdateStatusAndVisual()
    {
        if (itemData.canBuy)
        {
            // Item v·∫´n ƒëang b√°n - m√†u v√†ng nh·∫°t
            if (statusText != null)
                statusText.text = "ƒêang b√°n";

            if (backgroundImage != null)
                backgroundImage.color = sellingColor;

            // Button v·∫´n clickable nh∆∞ng s·∫Ω kh√¥ng l√†m g√¨
            if (slotButton != null)
                slotButton.interactable = true;
        }
        else
        {
            // Item ƒë√£ ƒë∆∞·ª£c b√°n - m√†u xanh nh·∫°t, c√≥ th·ªÉ claim
            if (statusText != null)
                statusText.text = $"ƒê√£ b√°n - Click ƒë·ªÉ claim {itemData.price}G";

            if (backgroundImage != null)
                backgroundImage.color = soldColor;

            if (slotButton != null)
                slotButton.interactable = true;
        }
    }

    private void SetupSlotButton()
    {
        if (slotButton != null)
        {
            // Clear existing listeners
            slotButton.onClick.RemoveAllListeners();
            
            // Add click event
            slotButton.onClick.AddListener(OnSlotClick);
        }
    }

    private void OnSlotClick()
    {
        if (isEmpty || itemData == null)
        {
            Debug.Log("[SoldItemSlot_UI] Slot r·ªóng - kh√¥ng l√†m g√¨");
            return;
        }

        if (itemData.canBuy)
        {
            // Item ƒëang b√°n - kh√¥ng l√†m g√¨, ch·ªâ log
            Debug.Log($"[SoldItemSlot_UI] Item {itemData.collectableType} is still for sale");
            return;
        }

        // Item ƒë√£ b√°n - proceed v·ªõi claim
        Debug.Log($"[SoldItemSlot_UI] Claiming item: {itemData.collectableType} for {itemData.price}G");
        
        // Disable button ƒë·ªÉ tr√°nh double-click
        if (slotButton != null)
            slotButton.interactable = false;

        // Call callback
        onClaimCallback?.Invoke(itemData);
    }

    /// <summary>
    /// Re-enable slot button (g·ªçi khi claim th·∫•t b·∫°i)
    /// </summary>
    public void EnableSlotButton()
    {
        if (slotButton != null && !isEmpty)
            slotButton.interactable = true;
    }

    /// <summary>
    /// Get item ID for tracking
    /// </summary>
    public int GetItemId()
    {
        return itemData?.id ?? -1;
    }

    /// <summary>
    /// Destroy this slot with animation
    /// </summary>
    public void DestroySlot()
    {
        Debug.Log($"üóëÔ∏è [SoldItemSlot] Destroying slot for item ID: {GetItemId()}");
        
        // Optional: Th√™m animation tr∆∞·ªõc khi destroy
        // StartCoroutine(DestroyWithAnimation());
        
        // Immediate destroy cho ƒë∆°n gi·∫£n
        Destroy(gameObject);
    }

    /// <summary>
    /// Check if this slot is empty
    /// </summary>
    public bool IsEmpty => isEmpty;
}