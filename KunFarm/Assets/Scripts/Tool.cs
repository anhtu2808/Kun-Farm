using UnityEngine;

/// <summary>
/// Base class cho t·∫•t c·∫£ tools trong game
/// </summary>
[System.Serializable]
public abstract class Tool
{
    public string toolName;
    public Sprite toolIcon;
    public int animatorToolIndex; // Index cho animator
    public int quantity = 1; // S·ªë l∆∞·ª£ng/ƒë·ªô b·ªÅn c·ªßa tool

    public abstract void Use(Vector3Int cellPosition, TileManager tileManager);
    public abstract bool CanUse(Vector3Int cellPosition, TileManager tileManager);

    /// <summary>
    /// Consume tool khi s·ª≠ d·ª•ng. Return true n·∫øu tool c√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c
    /// </summary>
    public virtual bool ConsumeOnUse()
    {
        return true; // M·∫∑c ƒë·ªãnh kh√¥ng consume
    }

    /// <summary>
    /// Check xem tool c√≥ th·ªÉ b·ªã consume kh√¥ng
    /// </summary>
    public virtual bool IsConsumable()
    {
        return false; // M·∫∑c ƒë·ªãnh kh√¥ng consumable
    }
}

/// <summary>
/// Tool ƒë·ªÉ ƒë√†o ƒë·∫•t
/// </summary>
[System.Serializable]
public class ShovelTool : Tool
{
    public ShovelTool(int durability = 10)
    {
        toolName = "Shovel";
        animatorToolIndex = 1; // Index for shovel tool in animator
        quantity = durability; // ƒê·ªô b·ªÅn c·ªßa x·∫ªng
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        TileState currentState = tileManager.GetTileState(cellPosition);
        if (currentState == TileState.Undug)
        {
            tileManager.SetTileState(cellPosition, TileState.Dug);
        }
        PlayDiggingSound();
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        return quantity > 0 && tileManager.GetTileState(cellPosition) == TileState.Undug;
    }

    public override bool ConsumeOnUse()
    {
        quantity--;
        return quantity > 0; // Return false n·∫øu h·∫øt ƒë·ªô b·ªÅn
    }

    public override bool IsConsumable()
    {
        return true; // Shovel c√≥ th·ªÉ h·∫øt ƒë·ªô b·ªÅn
    }
    private void PlayDiggingSound()
    {
        // T√¨m DiggingAudio component trong Player ho·∫∑c GameObject ƒëang s·ª≠ d·ª•ng tool
        DiggingAudio diggingAudio = Object.FindObjectOfType<DiggingAudio>();
        if (diggingAudio != null)
        {
            diggingAudio.PlayDiggingSoundWithRandomPitch();
        }
        else
        {
            Debug.LogWarning("DiggingAudio component not found in scene!");
        }
    }
}

/// <summary>
/// Tool ƒë·ªÉ tr·ªìng c√¢y v·ªõi crop data c·ª• th·ªÉ
/// </summary>
[System.Serializable]
public class SeedTool : Tool
{
    public CropData cropData;

    public SeedTool(CropData crop, int seedCount = 1)
    {
        cropData = crop;
        toolName = crop ? crop.cropName + " Seed" : "Seed";
        animatorToolIndex = 2;
        quantity = seedCount; // S·ªë l∆∞·ª£ng h·∫°t gi·ªëng
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        if (cropData == null || cropData.cropPrefab == null) return;

        // Tr·ªìng c√¢y
        Vector3 worldPos = tileManager.GetTilemap().GetCellCenterWorld(cellPosition);
        GameObject newPlant = Object.Instantiate(cropData.cropPrefab, worldPos, Quaternion.identity);
        newPlant.name = cropData.cropName + " Plant";

        CropGrower cropGrower = newPlant.GetComponent<CropGrower>();
        if (cropGrower != null)
        {
            // IMPORTANT: Explicitly set cropData on the instantiated plant
            cropGrower.cropData = cropData;
            cropGrower.SetTilePosition(cellPosition);
            tileManager.RegisterPlant(cellPosition, newPlant);
            tileManager.SetTileState(cellPosition, TileState.Planted);
            Debug.Log($"[SeedTool] ‚úÖ Planted {cropData.name} at ({cellPosition.x}, {cellPosition.y}) with cropData set");
        }
        else
        {
            Object.Destroy(newPlant);
        }
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        return quantity > 0 &&
               cropData != null &&
               cropData.cropPrefab != null &&
               tileManager.GetTileState(cellPosition) == TileState.Dug;
    }

    public override bool ConsumeOnUse()
    {
        quantity--;
        return quantity > 0; // Return false n·∫øu h·∫øt h·∫°t gi·ªëng
    }

    public override bool IsConsumable()
    {
        return true; // Seed c√≥ th·ªÉ h·∫øt
    }
}

/// <summary>
/// Tool ƒë·ªÉ thu ho·∫°ch c√¢y
/// </summary>
[System.Serializable]
public class HandTool : Tool
{
    public HandTool()
    {
        toolName = "Hand";
        animatorToolIndex = 3;
        quantity = -1; // -1 = v√¥ h·∫°n
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        GameObject plant = tileManager.GetPlantAt(cellPosition);
        if (plant != null)
        {
            CropGrower cropGrower = plant.GetComponent<CropGrower>();
            if (cropGrower != null)
            {
                if (cropGrower.isMature)
                {
                    if (cropGrower.cropData.cropName == "Apple")
                    {
                        cropGrower.HarvestFruitOnly();
                    }
                    else
                    {
                        // Thu ho·∫°ch c·∫£ h·∫°t v√† qu·∫£
                        cropGrower.Harvest(); // spawn t·∫•t c·∫£ harvestDrops
                    }
                    // Plant is mature - harvest it

                    // tileManager.DeregisterPlant(cellPosition);
                    // tileManager.SetTileState(cellPosition, TileState.Dug);
                    // Object.Destroy(plant);

                    // Show harvest success notification
                    string cropName = cropGrower.cropData?.cropName ?? "Plant";
                    SimpleNotificationPopup.Show($"üåæ Harvested {cropName}!");
                }
                else
                {
                    // Plant is not mature - show remaining time
                    string cropName = cropGrower.cropData?.cropName ?? "Plant";
                    string remainingTime = cropGrower.GetFormattedRemainingTime();
                    float progress = cropGrower.GetGrowthProgress();

                    SimpleNotificationPopup.Show($"üå± {cropName} not ready yet!\n‚è∞ Time remaining: {remainingTime}\nüìä Growth progress: {progress:F0}%");
                }
            }
        }
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        GameObject plant = tileManager.GetPlantAt(cellPosition);
        if (plant != null)
        {
            CropGrower cropGrower = plant.GetComponent<CropGrower>();
            return cropGrower != null; // Can use on any plant, regardless of maturity
        }
        return false;
    }

    public override bool ConsumeOnUse()
    {
        return true; // Hand tool kh√¥ng bao gi·ªù h·∫øt
    }

    public override bool IsConsumable()
    {
        return false; // Hand tool vƒ©nh vi·ªÖn
    }
}

/// <summary>
/// Tool ƒë·ªÉ ƒÉn food v√† restore health/hunger
/// </summary>
[System.Serializable]
public class FoodTool : Tool
{
    [Header("Food Properties")]
    public float hungerRestore = 50f;
    public float healthRestore = 30f;

    public FoodTool(int foodCount = 1)
    {
        toolName = "Food";
        animatorToolIndex = 4; // Index cho eating animation
        quantity = foodCount;
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        // Food tool kh√¥ng c·∫ßn cellPosition ho·∫∑c tileManager
        // Logic eating s·∫Ω ƒë∆∞·ª£c handle trong ToolManager
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        // Food lu√¥n c√≥ th·ªÉ d√πng mi·ªÖn l√† c√≤n quantity
        return quantity > 0;
    }

    public override bool ConsumeOnUse()
    {
        quantity--;
        return quantity > 0; // Return false n·∫øu h·∫øt food
    }

    public override bool IsConsumable()
    {
        return true; // Food c√≥ th·ªÉ h·∫øt
    }

    /// <summary>
    /// Eat food v√† restore player stats
    /// </summary>
    public void EatFood()
    {
        PlayerStats playerStats = Object.FindObjectOfType<PlayerStats>();
        if (playerStats != null)
        {
            playerStats.RestoreHunger(hungerRestore);
            playerStats.RestoreHealth(healthRestore);

            SimpleNotificationPopup.Show($"Ate {toolName}! +{hungerRestore} Hunger, +{healthRestore} Health");
            Debug.Log($"[FoodTool] Ate {toolName}: +{hungerRestore} hunger, +{healthRestore} health");
        }
        else
        {
            Debug.LogWarning("[FoodTool] PlayerStats not found!");
        }
    }
}

/// <summary>
/// Tool ƒë·ªÉ t∆∞·ªõi c√¢y v√† gi·∫£m th·ªùi gian grow
/// </summary>
[System.Serializable]
public class WateringCanTool : Tool
{
    public WateringCanTool(int waterUses = 10)
    {
        toolName = "Watering Can";
        animatorToolIndex = 5; // Index cho watering animation
        quantity = waterUses; // S·ªë l·∫ßn t∆∞·ªõi
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        GameObject plant = tileManager.GetPlantAt(cellPosition);
        if (plant != null)
        {
            CropGrower cropGrower = plant.GetComponent<CropGrower>();
            if (cropGrower != null && !cropGrower.isMature)
            {
                // Apply direct time reduction
                float timeReduced = cropGrower.ApplyWateringReduction(0.3f); // 30% reduction

                // Show notification
                SimpleNotificationPopup.Show($"üåßÔ∏è Watered {cropGrower.cropData?.cropName ?? "plant"}!\n‚ö° Growth time reduced by {timeReduced:F0} seconds");
            }
        }
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        if (quantity <= 0) return false;

        GameObject plant = tileManager.GetPlantAt(cellPosition);
        if (plant != null)
        {
            CropGrower cropGrower = plant.GetComponent<CropGrower>();
            return cropGrower != null && !cropGrower.isMature; // Ch·ªâ t∆∞·ªõi c√¢y ch∆∞a tr∆∞·ªüng th√†nh
        }
        return false;
    }

    public override bool ConsumeOnUse()
    {
        quantity--;
        return quantity > 0; // Return false n·∫øu h·∫øt n∆∞·ªõc
    }

    public override bool IsConsumable()
    {
        return true; // Watering can c√≥ th·ªÉ h·∫øt n∆∞·ªõc
    }
}

[System.Serializable]
public class AxeTool : Tool
{
    public AxeTool(int durability = 10)
    {
        toolName = "Axe";
        animatorToolIndex = 6; // Index for shovel tool in animator
        quantity = durability; // ƒê·ªô b·ªÅn c·ªßa x·∫ªng
    }

    public override void Use(Vector3Int cellPosition, TileManager tileManager)
    {
        GameObject plantGO = tileManager.GetPlantAt(cellPosition);
        if (plantGO == null) return;

        var crop = plantGO.GetComponent<CropGrower>();
        if (crop == null) return;

        if (crop.isMature)
        {
            // Thu ho·∫°ch c·∫£ h·∫°t v√† qu·∫£
            crop.Harvest();                            // spawn t·∫•t c·∫£ harvestDrops
            tileManager.DeregisterPlant(cellPosition); // remove reference
            Object.Destroy(plantGO);                   // xo√° c√¢y
            tileManager.SetTileState(cellPosition, TileState.Dug);
        }
        else
        {
            // Plant is not mature - show remaining time
            string cropName = crop.cropData?.cropName ?? "Plant";
            string remainingTime = crop.GetFormattedRemainingTime();
            float progress = crop.GetGrowthProgress();

            SimpleNotificationPopup.Show($"üå± {cropName} not ready yet!\n‚è∞ Time remaining: {remainingTime}\nüìä Growth progress: {progress:F0}%");
        }
        // tileManager.DeregisterPlant(cellPosition);
        // tileManager.SetTileState(cellPosition, TileState.Dug);
        // Object.Destroy(plant);

        SimpleNotificationPopup.Show($"ü™ì Chopped down {crop.cropData.cropName}!");
    }

    public override bool CanUse(Vector3Int cellPosition, TileManager tileManager)
    {
        GameObject plant = tileManager.GetPlantAt(cellPosition);
        if (plant != null)
        {
            CropGrower cropGrower = plant.GetComponent<CropGrower>();
            if (cropGrower == null) return false;
            
            return cropGrower.isMature; // Ch·ªâ c√≥ th·ªÉ d√πng khi c√¢y ƒë√£ tr∆∞·ªüng th√†nh
        }
        return false;
    }

    public override bool ConsumeOnUse()
    {
        quantity--;
        return quantity > 0; // Return false n·∫øu h·∫øt ƒë·ªô b·ªÅn
    }

    public override bool IsConsumable()
    {
        return true; // Shovel c√≥ th·ªÉ h·∫øt ƒë·ªô b·ªÅn
    }
}